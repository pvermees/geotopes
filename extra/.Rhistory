Q
out
fit
Q
out
Q
fit
Q
out
fit
solve(fit$hessian)
Q
out
fit
solve(fit$hessian)
out
fit
solve(fit$hessian)
fit
fit
out
out
fit
Q
out
fit
Q
out
Q
fit
sovle(fit$hessian)
solve(fit$hessian)
out
fit
fit
fit
Q
fit
fit
fit
fit
class(york)
?do.call
?do.call
?do.call
args
?dcall
?do.call
?do.call
darg
uargs
largs
do.call(what=fn,args=uargs)
Q
do.call(what=fn,args=uargs)
dLLdp
Q
do.call(what=fn,args=uargs)
lfact
ufact
init
Q
dLLdp
fit
fit
Q
?plot
?optim
?do.call
ps
Q
optimargs
fit
Q
optimargs
Q
fit
Q
?optim
fit
ps
fit
fit
ps
fit
fit
fit
fit
traceback()
ps
fit
solve(fit$hessian)
NMargs
Q
ps
BGSargs[['control']] <- NULL
BFGSargs[['control']] <- NULL
fit
Q
fit
NMfit
Q
fit
NMfit
solve(NMfit$hessian)
fit
NMfit
ps
do.call(what=stats::optim,args=NMargs)
Q
fin
fn
fit
dLLdp
min(dLLdp)/dLLdp
Q
ps
fit
fit
do.call(what=stats::optim,args=NMargs)
ps
NMargs[['control']]
NMargs[['control']] <- c(1,1,1)
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- c(1e-3,1e-3,1)
do.call(what=stats::optim,args=NMargs)
ps
NMargs[['control']] <- c(1e-1,1e-2,1)
NMargs[['control']] <- c(1e-3,1e-3,1)
NMargs[['control']] <- c(1e-1,1e-2,1)
do.call(what=stats::optim,args=NMargs)
max(ps)/ps
NMargs[['control']] <- c(1/400,1/2000,1)
do.call(what=stats::optim,args=NMargs)
NMargs
Q
NMargs$control
Q
NMfit$control
NMargs$control
fit
solve(fit$hessian)
Q
dat
dat$
x
fit
ps
Q
ps
fit
fit
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- c(1,1,1)
do.call(what=stats::optim,args=NMargs)
ps
NMargs[['control']] <- c(0.1,0.001,1)
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- c(0.1,0.002,1)
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(0.1,0.002,1))
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1,1,1))
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(0.1,0.001,1))
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(0.1,0.1,1))
do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(0.1,0.01,1))
do.call(what=stats::optim,args=NMargs)
BFGSargs[['control']] <- list(parscale=c(0.1,0.1,1))
do.call(what=stats::optim,args=BFGSargs)
NMargs[['control']] <- list(parscale=c(0.1,0.1,1))
do.call(what=stats::optim,args=NMargs)
ps
NMargs[['control']] <- list(parscale=c(0.1,0.1,10))
do.call(what=stats::optim,args=NMargs)
traceback()
Q
traceback()
traceback()
Q
fit
ps
fit
fit
traceback()
w
ta0b0w
Q
E
Q
tryCatch(LL.norm(KL,E),error=function(e) Inf)
Q
fit
NMfit
NMargs[['control']] <- list(parscale=c(1,1,1))
do.call(what=stats::optim,args=NMargs)
Q
ps
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1))
do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=1/ps)
do.call(what=stats::optim,args=BFGSargs)
Q
args
args$par
gr
gr
gr
dpdLL
Q
gr
gr
gr
dpdLL
Q
dpdLL/max(dpdLL)
dpdLL
Q
dpdLL
Q
fit
NMfit
fit
NMfit
Q
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1))
do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(10,1,1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(0.1,1,1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,0.1,1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,1,10)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,1,0.1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,1,0.01)); do.call(what=stats::optim,args=BFGSargs)
ps
NMfit
NMargs[['control']] <- list(parscale=c(1,1,0.01)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/2,1,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/2,1/2,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/2,1/3,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/2,1/2,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/4,1/2,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/2,1/3,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1/2,2/3,1)); do.call(what=stats::optim,args=NMargs)
NMargs[['control']] <- list(parscale=c(1,1/2,1)); do.call(what=stats::optim,args=NMargs)
BFGSargs[['control']] <- list(parscale=c(1/2,1/2,1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,1/2,1)); do.call(what=stats::optim,args=BFGSargs)
Q
fn
name(fn)
gr
args$par
uargs
uargs[[1]]
largs[[1]]
gr
dpdLL
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=BFGSargs)
ps
Q
ps
fit
Q
fit
ps
Q
LLu
Q
dpdLL
Q
ps
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=BFGSargs)
Q
ps
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=BFGSargs)
lower
upper
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=BFGSargs)
NMfit
NMargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=NMargs)
Q
?optim
traceback()
par
par
Q
fit
fit$cov
Q
fit
par
Q
Q
init
fit
init
init
Q
init
Q
fit
Q
fit$par
is.na(fit$par)
Q
p
par
Q
args
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,1)); do.call(what=stats::optim,args=BFGSargs)
fit
ps
fit
BFGSargs[['control']] <- list(parscale=c(1,1)); do.call(what=stats::optim,args=BFGSargs)
BFGSargs[['control']] <- list(parscale=c(1,1,1)); do.call(what=stats::optim,args=BFGSargs)
Q
traceback()
ps
fit
do.call(what=stats::optim,args=BFGSargs)
BFGSargs
do.call(what=stats::optim,args=BFGSargs)
args
args$par
BFGSargs[['control']] <- list(parscale=c(1,1))
do.call(what=stats::optim,args=BFGSargs)
Q
traceback()
traceback()
traceback()
fit$par
tt
McL
par
ower
 lower
upper
fit
fit
afit
model
init
init
init
Q
X$d
X$d$U48
Q
X$d
X$d
Q
?diseq
X
X$d
X$d$U48
init
Q
init
fit
Q
tt
lower
upper
lower
upper
Q
w
Q
fit
fit
fit$par
Q
E
Q
fit
traceback()
init
ps
fit
solve(fit$hessian)
ps
fit
solve(fit$hessian)
fit
fit
solve(fit$hessian)
Q
warnings()
ps
fit
lower
upper
args$par
ps
do.call(what=stats::optim,args=BFGSargs)
BFGSargs['control'] <- list(par=c(1,1));do.call(what=stats::optim,args=BFGSargs)
        NMargs <- args
        names(NMargs)[1] <- 'par'
        NMargs[['fn']] <- fn
        NMargs[['method']] <- 'Nelder-Mead'
        NMargs[['hessian']] <- hessian
        NMargs[['control']] <- list(parscale=ps)
        NMfit <- do.call(what=stats::optim,args=NMargs)

NMfit
NMargs['control'] <- list(par=c(1,1));do.call(what=stats::optim,args=NMargs)
fit
ps
Q
?optim
?optim
fit
?optim
Q
fit
traceback()
ps
fit
        NMargs <- args
        names(NMargs)[1] <- 'par'
        NMargs[['fn']] <- fn
        NMargs[['method']] <- 'Nelder-Mead'
        NMargs[['hessian']] <- hessian
        NMargs[['control']] <- list(parscale=ps)
        NMfit <- do.call(what=stats::optim,args=NMargs)

NMfit
?optim
BFGSargs[['control']] <- list(parscale=ps,factr=1e4)
do.call(what=stats::optim,args=BFGSargs)
Q
init
Q
par
E['t','t']
E
fit$hessian
Q
fit
ps
fit
lower
upper
ps
fit
solve(fit$hessian)
ps
NFfit$hessian
NMfit$hessian
Q
out
H
out$cov
H[1:3,1:3]
solve(H)[1:3,1:3]
inverthess(H)[1:3,1:3]
inverthess(out$hessian)
det(H)
det(out$hessian)
invertible(H)
invertible(out$hessian)
ps
fit
solve(fit$hessian)
MASS::ginv(fit$hessian)
inverthess(fit$hessian)
fit
BFGSargs[['control']] <- list(parscale=c(1,1,1))
do.call(what=stats::optim,args=BFGSargs)
        NMargs <- args
        names(NMargs)[1] <- 'par'
        NMargs[['fn']] <- fn
        NMargs[['method']] <- 'Nelder-Mead'
        NMargs[['hessian']] <- hessian

do.call(what=stats::optim,args=NMargs)
Q
scatterplot(xyz)
scatterplot(xyz,fit=pilot)
pilot
init
Q
ps
fit
det(fit$hessian)
Q
fit
fit
solve(fit$hessian)
NMfit
ps
NMfit
solve(NMfit$hessian)
out
solve(out$hessian)
Q
init
lower
upper
ps
args
Q
BFGSargs
LL.york(abw=args$par,XY=XY,wtype=wtype)
LL.york(abw=args$par,XY=args$XY,wtype=args$wtype)
Q
traceback()
q()
n
