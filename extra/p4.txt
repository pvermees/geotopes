Visit [`https://github.com/pvermees/geotopes/tree/master/practicals/UPb/`](https://github.com/pvermees/geotopes/tree/master/practicals/UPb/) and download
files `GJ1.csv` (standard) and `smp1.csv` through `smp4.csv` (samples).

   (a) Process these files using your U-Pb data reduction functions
   and save the atomic ^207^Pb/^235^U and ^206^Pb/^238^U-ratios and their
   uncertainties in four vectors.

   (b) Write a function to determine the error correlation between
   the blank-corrected ^207^Pb/^235^U and ^206^Pb/^238^U-ratios
   of the samples.

   (c) Form a matrix with four rows (one for each sample) and
   five columns with the ^207^Pb/^235^U-ratios, the standard errors
   of the ^207^Pb/^235^U-ratios, the ^206^Pb/^238^U-ratios,
   the standard errors of the ^206^Pb/^238^U-ratios,
   and the error correlations obtained from part (b).

   (d) Enter the values in this matrix into the online version of
   `IsoplotR` (
   [`http://isoplotr.es.ucl.ac.uk`](http://isoplotr.es.ucl.ac.uk) ).
   Note: change to input format 1 in the `Options` menu. Visualise
   the data on a concordia diagram.
   
   ```{r}
   dir <- '/home/pvermees/Documents/geotopes/practicals/UPb/'

   blankcorr <- function(dat,bi,si){
      return(dat[si] - mean(dat[bi]))
   }

   meanUPbRatio <- function(D,P,bi,si){
      ratiovec <- blankcorr(D,bi,si)/blankcorr(P,bi,si)
      out <- c(0,0)
      out[1] <- mean(ratiovec)
      out[2] <- sd(ratiovec)/sqrt(length(ratiovec))
      return(out)
   }

   calibration <- function(D,P,tstd,lambda,bi,si){
      atomic <- exp(lambda*tstd)-1
      measured <- meanUPbRatio(D,P,bi,si)
      out <- c(0,0)
      out[1] <- atomic/measured[1]
      out[2] <- out[1]*measured[2]/measured[1]
      return(out)
   }

   atomic <- function(samp,stand,num='Pb206',den='U238',tstd,lambda,tb,ts){
      bi <- samp$Time<tb
      si <- samp$Time>ts
      measured <- meanUPbRatio(D=samp[[num]],P=samp[[den]],bi=bi,si=si)
      cal <- calibration(D=std[[num]],P=std[[den]],tstd=tstd,
                         lambda=lambda,bi=bi,si=si)
      out <- c(0,0)
      out[1] <- cal[1]*measured[1]
      out[2] <- out[1] * sqrt( (cal[2]/cal[1])^2 + (measured[2]/measured[1])^2 )
      return(out)
   }

   getcorr <- function(samp,D1,P1,D2,P2,tb,ts){
      bi <- (samp$Time<tb)
      si <- (samp$Time>ts)
      R1 <- blankcorr(samp[[D1]],bi,si)/blankcorr(samp[[P1]],bi,si)
      R2 <- blankcorr(samp[[D2]],bi,si)/blankcorr(samp[[P2]],bi,si)
      return(cor(R1,R2))
   }

   tb <- 20 # end of blank (in seconds)
   ts <- 25 # start of signal (in seconds)
   tstd <- 600.4 # Ma
   l38 <- 1.55125e-4 # Myr-1
   l35 <- 9.8485e-4 # Myr-1
   std <- read.csv(paste0(dir,"GJ1.csv"),header=TRUE)
   ns <- 4
   tab <- matrix(0,nrow=ns,ncol=5)
   colnames(tab) <- c('Pb207/U235','err','Pb206/U238','err','rho')
   for (i in 1:ns){
      sname <- paste0(dir,'smp',i,'.csv')
      smp <- read.csv(file=sname,header=TRUE)
      tab[i,1:2] <- atomic(samp=smp,stand=std,num='Pb207',den='U235',
		           tstd=tstd,lambda=l35,tb=tb,ts=ts)
      tab[i,3:4] <- atomic(samp=smp,stand=std,num='Pb206',den='U238',
		           tstd=tstd,lambda=l38,tb=tb,ts=ts)
      tab[i,5] <- getcorr(smp,D1='Pb207',P1='U235',D2='Pb206',P2='U238',tb=tb,ts=ts)
   }
   # The following line produces the same output as the online GUI:
   IsoplotR::concordia(IsoplotR:::as.UPb(tab,format=1))
   ```
